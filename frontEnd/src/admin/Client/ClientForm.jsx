import { useState, useEffect } from "react";
import "./client.css"; // Assuming you have CSS for styling
import Sidebar from "../sidebar";
import axios from "axios";

const ClientForm = ({
  clients,
  setClients,
  toggleForm,
  editingClient,
  showToast,
}) => {
  const [formData, setFormData] = useState({
    prefix: "Mr.", // Default prefix
    lastName: "",
    middleInitial: "",
    firstName: "",
    username: "",
    password: "",
    address: "",
    mobile_number: "",
    email_add: "",
    status: "active",
    birthday: "",
    companyName: "",
  });

  useEffect(() => {
    if (editingClient) {
      setFormData(editingClient);
    }
  }, [editingClient]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const sendEmail = async (email, username, password) => {
    try {
      const response = await axios.post("http://localhost:8081/send-email", {
        to: email,
        subject: "Welcome to iConsult!",
        text: `Hello ${formData.prefix} ${formData.firstName} ${formData.lastName},\n\nYour account has been created successfully. Here are your login credentials:\n\nUsername: ${username}\nPassword: ${password}\n\nBest regards,\nThe iConsult Team`,
        html: `<h1>Welcome to iConsult!</h1><p>Hello ${formData.prefix} ${formData.firstName} ${formData.lastName},</p><p>Your account has been created successfully. Here are your login credentials:</p><ul><li>Username: ${username}</li><li>Password: ${password}</li></ul><p>Best regards,<br>Sharp Minds Business and Consultancy, Inc.</p>`,
      });
      console.log("Email sent:", response.data);
    } catch (error) {
      console.error("Error sending email:", error.message);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const autogeneratedUsername = `${formData.lastName.toLowerCase()}.${formData.firstName.toLowerCase()}`;
    const autogeneratedPassword = `${formData.lastName.toUpperCase()}12345`;

    const newClientData = {
      ...formData,
      username: autogeneratedUsername,
      password: autogeneratedPassword,
      email: formData.email_add,
    };

    try {
      let response;
      if (editingClient) {
        // Update logic
      } else {
        response = await fetch("http://localhost:8081/client", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newClientData),
        });

        const result = await response.json();
        if (response.ok) {
          setClients([...clients, result]);
          showToast();

          await fetch("http://localhost:8081/notifications", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              title: "New Client Added",
              description: `Client ${formData.firstName} ${formData.lastName} has been successfully created.`,
              timestamp: new Date().toISOString(),
              isRead: false,
            }),
          });

          await sendEmail(
            newClientData.email,
            autogeneratedUsername,
            autogeneratedPassword
          );
        } else {
          console.error("Error saving client:", result);
        }
      }

      toggleForm();
      setFormData({
        prefix: "Mr.",
        lastName: "",
        middleInitial: "",
        firstName: "",
        username: "",
        password: "",
        address: "",
        mobile_number: "",
        email_add: "",
        status: "active",
        birthday: "",
        companyName: "",
      });
    } catch (error) {
      console.error("An error occurred:", error);
    }
  };

  return (
    <div className="admin-home-page">
      <Sidebar />
      <div className="content">
        <form onSubmit={handleSubmit}>
          <h3>{editingClient ? "Edit Client" : ""}</h3>

          {/* Prefix */}
          <select name="prefix" value={formData.prefix} onChange={handleChange}>
            <option value="Mr.">Mr.</option>
            <option value="Mrs.">Mrs.</option>
            <option value="Ms.">Ms.</option>
            <option value="Dr.">Dr.</option>
          </select>

          {/* Last Name */}
          <input
            type="text"
            name="lastName"
            placeholder="Last Name"
            value={formData.lastName}
            onChange={handleChange}
            required
          />
          {/* First Name */}
          <input
            type="text"
            name="firstName"
            placeholder="First Name"
            value={formData.firstName}
            onChange={handleChange}
            required
          />
          {/* Middle Initial */}
          <input
            type="text"
            name="middleInitial"
            placeholder="Middle Initial"
            value={formData.middleInitial}
            onChange={handleChange}
          />

          {/* Birthday */}
          <input
            type="date"
            name="birthday"
            value={formData.birthday}
            onChange={handleChange}
          />

          {/* Autogenerated Username */}
          <label>Username:</label>
          <input
            type="text"
            value={`${formData.lastName.toLowerCase()}.${formData.firstName.toLowerCase()}`}
            disabled
          />

          {/* Autogenerated Password */}
          <label>Password:</label>
          <input
            type="text"
            value={`${formData.lastName.toUpperCase()}12345`}
            disabled
          />

          {/* Address */}
          <input
            type="text"
            name="address"
            placeholder="Address"
            value={formData.address}
            onChange={handleChange}
          />

          {/* Mobile Number */}
          <input
            type="tel"
            name="mobile_number"
            placeholder="Mobile Number"
            value={formData.mobile_number}
            onChange={handleChange}
          />

          {/* Email Address */}
          <input
            type="email"
            name="email_add"
            placeholder="Email Address"
            value={formData.email_add}
            onChange={handleChange}
          />

          {/* Company Name */}
          <input
            type="text"
            name="companyName"
            placeholder="Company Name"
            value={formData.companyName}
            onChange={handleChange}
          />

          {/* Status */}
          <label>Status:</label>
          <select name="status" value={formData.status} onChange={handleChange}>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>

          <button type="submit">
            {editingClient ? "Update Client" : "Add Client"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default ClientForm;
