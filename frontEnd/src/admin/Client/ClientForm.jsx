import { useState } from "react";
import "./client.css";
import Sidebar from "../sidebar";
import axios from "axios";

const ClientForm = ({ clients, setClients, showToast }) => {
  const [formData, setFormData] = useState({
    prefix: "Mr.",
    lastName: "",
    middleInitial: "",
    firstName: "",
    address: "",
    mobile_number: "",
    email_add: "",
    status: "active",
    birthday: "",
    companyName: "",
    city: "",
    postalCode: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const sendEmail = async (email, username, password) => {
    try {
      await axios.post("http://localhost:8081/send-email", {
        to: email,
        subject: "Welcome to iConsult!",
        html: `<h1>Welcome to iConsult!</h1><p>Your account details:</p><ul><li>Username: ${username}</li><li>Password: ${password}</li></ul>`,
      });
    } catch (error) {
      console.error("Error sending email:", error.message);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const autogeneratedUsername = `${formData.lastName.toLowerCase()}.${formData.firstName.toLowerCase()}`;
    const autogeneratedPassword = `${formData.lastName.toUpperCase()}12345`;

    const newClientData = {
      ...formData,
      username: autogeneratedUsername,
      password: autogeneratedPassword,
      email: formData.email_add,
    };

    try {
      const response = await fetch("http://localhost:8081/client", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newClientData),
      });

      if (response.ok) {
        const result = await response.json();
        setClients([...clients, result]);
        showToast();

        await sendEmail(
          newClientData.email,
          autogeneratedUsername,
          autogeneratedPassword
        );
      } else {
        console.error("Error saving client:", await response.text());
      }
    } catch (error) {
      console.error("An error occurred:", error);
    }
  };

  return (
    <div className="client-home-page">
      <Sidebar />
      <div className="client-content">
        <form onSubmit={handleSubmit} className="client-form-grid">
          <div className="client-form-row">
            <select name="prefix" value={formData.prefix} onChange={handleChange}>
              <option value="Mr.">Mr.</option>
              <option value="Mrs.">Mrs.</option>
              <option value="Ms.">Ms.</option>
              <option value="Dr.">Dr.</option>
            </select>
            <input
              type="text"
              name="lastName"
              placeholder="Last Name"
              value={formData.lastName}
              onChange={handleChange}
              required
            />
            <input
              type="text"
              name="firstName"
              placeholder="First Name"
              value={formData.firstName}
              onChange={handleChange}
              required
            />
          </div>

          <div className="client-form-row">
            <input
              type="text"
              name="middleInitial"
              placeholder="Middle Initial"
              value={formData.middleInitial}
              onChange={handleChange}
            />
            <input
              type="date"
              name="birthday"
              value={formData.birthday}
              onChange={handleChange}
            />
          </div>

          <div className="client-form-row">
            <label>Username:</label>
            <input
              type="text"
              value={`${formData.lastName.toLowerCase()}.${formData.firstName.toLowerCase()}`}
              disabled
            />
            <label>Password:</label>
            <input
              type="text"
              value={`${formData.lastName.toUpperCase()}12345`}
              disabled
            />
          </div>

          <div className="client-form-row">
            <input
              type="text"
              name="address"
              placeholder="Address"
              value={formData.address}
              onChange={handleChange}
            />
            <input
              type="tel"
              name="mobile_number"
              placeholder="Mobile Number"
              value={formData.mobile_number}
              onChange={handleChange}
            />
          </div>

          <div className="client-form-row">
            <input
              type="email"
              name="email_add"
              placeholder="Email Address"
              value={formData.email_add}
              onChange={handleChange}
            />
            <input
              type="text"
              name="companyName"
              placeholder="Company Name"
              value={formData.companyName}
              onChange={handleChange}
            />
          </div>

          <div className="client-form-row">
            <input
              type="text"
              name="city"
              placeholder="City"
              value={formData.city}
              onChange={handleChange}
            />
            <input
              type="text"
              name="postalCode"
              placeholder="Postal Code"
              value={formData.postalCode}
              onChange={handleChange}
            />
          </div>

          <div className="client-form-row">
            <select
              name="status"
              value={formData.status}
              onChange={handleChange}
            >
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>

          <button type="submit">Add Client</button>
        </form>
      </div>
    </div>
  );
};

export default ClientForm;
