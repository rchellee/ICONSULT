import { useState, useEffect } from "react";
import "./client-admin.css";
import Sidebar from "../sidebar";
import axios from "axios";

const ClientForm = ({ clients, setClients, showToast, hideToast, goBack }) => {
  const [formData, setFormData] = useState({
    lastName: "",
    firstName: "",
    address: "",
    mobile_number: "",
    email_add: "",
    status: "active",
    birthday: "",
    companyName: "",
    city: "",
    postalCode: "",
    age: "",
    nationality: "",
  });
  const [adminEmail, setAdminEmail] = useState("");

  useEffect(() => {
    const fetchAdminData = async () => {
      try {
        // Fetch admin email from the server
        const { data } = await axios.get("http://localhost:8081/admin");

        // Assuming the admin email is in the first entry of the data array
        if (data.length > 0) {
          setAdminEmail(data[0].email);
        }
      } catch (error) {
        console.error(
          "Error fetching admin data:",
          error.response?.data?.message || error.message
        );
      }
    };

    fetchAdminData();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const sendEmail = async (email, username, password) => {
    try {
      await axios.post("http://localhost:8081/send-email", {
        to: email,
        from: adminEmail,
        subject: "Welcome to iConsult!",
        html: `<h1>Welcome to iConsult!</h1>
<p>Your account details:</p>
<ul>
  <li>Username: ${username}</li>
  <li>Password: ${password}</li>
</ul>
<p>Click the link below to log in to your account:</p>
<a href="https://deployiconsult-6b3b14708c3c.herokuapp.com">Login to iConsult</a>`,
      });
    } catch (error) {
      console.error("Error sending email:", error.message);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const formattedFirstName = formData.firstName
      .toLowerCase()
      .replace(/\s+/g, "_");
    const formattedLastName = formData.lastName
      .toLowerCase()
      .replace(/\s+/g, "_");
    const autogeneratedUsername = `${formattedLastName}.${formattedFirstName}`;
    const autogeneratedPassword = `${formattedLastName.toUpperCase()}12345`;

    const newClientData = {
      ...formData,
      username: autogeneratedUsername,
      password: autogeneratedPassword,
      email: formData.email_add,
    };

    try {
      const response = await fetch("http://localhost:8081/client", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newClientData),
      });

      if (response.ok) {
        const result = await response.json();
        setClients([...clients, result]);
        showToast();
        await sendEmail(
          newClientData.email,
          autogeneratedUsername,
          autogeneratedPassword
        );
        goBack();
        hideToast();
      } else {
        console.error("Error saving client:", await response.text());
      }
    } catch (error) {
      console.error("An error occurred:", error);
    }
  };

  return (
    <div className="client-home-page">
      <Sidebar />
      <div className="client-content">
        <h4>Account Information</h4>
        <form onSubmit={handleSubmit} className="client-form-grid">
          {/* Account Section */}
          <div className="client-row">
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="firstName"
                placeholder="First Name"
                value={formData.firstName.toUpperCase()}
                onChange={handleChange}
                required
              />
              <div className="input-icon">
                <i className="fa fa-user"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="lastName"
                placeholder="Last Name"
                value={formData.lastName.toUpperCase()}
                onChange={handleChange}
                required
              />
              <div className="input-icon">
                <i className="fa fa-user"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="email"
                name="email_add"
                placeholder="Email Address"
                value={formData.email_add}
                onChange={handleChange}
                required
              />
              <div className="input-icon">
                <i className="fa fa-envelope"></i>
              </div>
            </div>
          </div>

          {/* Additional Personal Information Section */}
          <div className="client-row">
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="age"
                placeholder="Age"
                value={formData.age}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-calendar"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="nationality"
                placeholder="Nationality"
                value={formData.nationality.toUpperCase()}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-flag"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="mobile_number"
                placeholder="Mobile Number"
                value={formData.mobile_number}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-phone"></i>
              </div>
            </div>
          </div>

          {/* Address Section */}
          <div className="client-row">
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="address"
                placeholder="Address"
                value={formData.address.toUpperCase()}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-map-marker-alt"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="city"
                placeholder="City"
                value={formData.city.toUpperCase()}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-city"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="postalCode"
                placeholder="Postal Code"
                value={formData.postalCode}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-mail-bulk"></i>
              </div>
            </div>
          </div>
          {/* Company Information Section */}
          <div className="client-row">
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="companyName"
                placeholder="Company Name"
                value={formData.companyName.toUpperCase()}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-building"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="companyPosition"
                placeholder="Position in Company"
                value={formData.companyPosition || ""}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-briefcase"></i>
              </div>
            </div>
            <div className="input-group input-group-icon">
              <input
                type="text"
                name="companyContact"
                placeholder="Company Contact Number"
                value={formData.companyContact || ""}
                onChange={handleChange}
              />
              <div className="input-icon">
                <i className="fa fa-phone"></i>
              </div>
            </div>
          </div>
          {/* Date of Birth and Gender Section */}
          <div className="client-row">
            <h4>Birthdate</h4>
            <div className="col-half">
              <input
                type="date"
                name="birthday"
                value={formData.birthday}
                onChange={handleChange}
              />
            </div>
            <div className="col-half">
              <h4>Gender</h4>
              <div className="input-group">
                <input
                  type="radio"
                  name="gender"
                  value="male"
                  id="gender-male"
                  checked={formData.gender === "male"}
                  onChange={handleChange}
                />
                <label htmlFor="gender-male">Male</label>
                <input
                  type="radio"
                  name="gender"
                  value="female"
                  id="gender-female"
                  checked={formData.gender === "female"}
                  onChange={handleChange}
                />
                <label htmlFor="gender-female">Female</label>
              </div>
            </div>
          </div>
          {/* Autogenerated Username & Password Section */}
          <div className="client-row">
            <h4>Username:</h4>
            <input
              value={`${formData.lastName
                .toLowerCase()
                .replace(/\s+/g, "_")}.${formData.firstName
                .toLowerCase()
                .replace(/\s+/g, "_")}`}
              disabled
            />
            <h4>Password:</h4>
            <input
              value={`${formData.lastName
                .toUpperCase()
                .replace(/\s+/g, "_")}12345`}
              disabled
            />
          </div>
          {/* Submit Button */}
          <button type="submit">Add Client</button>
        </form>
      </div>
    </div>
  );
};

export default ClientForm;
